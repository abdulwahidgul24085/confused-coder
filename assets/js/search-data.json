{
  
    
        "post0": {
            "title": "Scraping data from the Offical Covid Pakistan Goverment website.",
            "content": "import pandas as pd import sqlite3 import requests from bs4 import BeautifulSoup import numpy as np from datetime import datetime website = &#39;http://covid.gov.pk/intl_travellers/flight_info&#39; cxn = sqlite3.connect(&quot;flights.db&quot;) . Checking the response from the website . On successful return we will have soup object which will provide us with the data from the website. . page = requests.get(website) if page.status_code == 200: soup = soup = BeautifulSoup(page.content, &#39;html.parser&#39;) else: print(&quot;Error Page status:&quot;, page.status_code) . Tables . Bases on the struct of the website we get the 2 table that we need. They are named accordingly. . scheduled_flights = soup.find_all(&#39;table&#39;)[1] complted_flights = soup.find_all(&#39;table&#39;)[2] . Scheduled Flights table loop . We skip the 1st row in the loop. This is the first complete in the data. It give use the following column names . [&#39;Sr #&#39;, &#39;From&#39;, &#39;Departure Airport&#39;, &#39;To&#39;, &#39;Arrival Date&#39;, &#39;Passengers&#39;, &#39;Airline&#39;] . Personal if you ask me they are kind of ugly. That is why you see an order write of the column with the varabile name cols . Status column . Since we have open and close status in the name of the from_place. I wanted to put it in it&#39;s own column. If you some need&#39;s or if we might want to fliter the status of the closed scheduled flights . data = [] for idx,tr in enumerate(scheduled_flights.find(&#39;tbody&#39;).find_all(&#39;tr&#39;)): if idx == 0: continue row = [td.text.replace(&#39; n&#39;,&#39;&#39;).replace(&#39; t&#39;,&#39;&#39;).replace(&#39; r&#39;,&#39;&#39;).replace(&#39; &#39;,&#39;&#39;) for td in tr.find_all(&#39;td&#39;)] row.append(&#39;open&#39; if &#39;open&#39; in row[1] else &#39;close&#39; if &#39;close&#39; in row[1] else np.nan) data.append(row) cols = [&#39;sr_no&#39;, &#39;from_place&#39;, &#39;departure_airport&#39;, &#39;to_place&#39;, &#39;arrival_date&#39;, &#39;passengers&#39;, &#39;airline&#39;, &#39;status&#39;] schedule = pd.DataFrame(data, columns=cols) # date format setting for the database schedule[&#39;arrival_date&#39;] = pd.to_datetime(schedule[&#39;arrival_date&#39;]).dt.date schedule.to_sql(&#39;schedule&#39;, cxn, if_exists=&#39;replace&#39;, index=False) . [&#39;Sr #&#39;, &#39;From&#39;, &#39;Departure Airport&#39;, &#39;To&#39;, &#39;Arrival Date&#39;, &#39;Passengers&#39;, &#39;Airline&#39;] . Completed Flights . We follow the same logic for completed flights table. We skip the same 1st row of the table as we did with the scheduled flights. But we have different number of columns for this table. Make sure you look at them. . data = [] for idx,tr in enumerate(complted_flights.find(&#39;tbody&#39;).find_all(&#39;tr&#39;)): if idx == 0: continue row = [td.text.replace(&#39; n&#39;,&#39;&#39;).replace(&#39; t&#39;,&#39;&#39;).replace(&#39; r&#39;,&#39;&#39;).replace(&#39; &#39;,&#39;&#39;) for td in tr.find_all(&#39;td&#39;)] data.append(row) cols = [&#39;sr_no&#39;, &#39;from_place&#39;, &#39;to_place&#39;, &#39;_date&#39;, &#39;passengers&#39;, &#39;airline&#39;,] completed = pd.DataFrame(data, columns=cols) # date format setting for the database completed[&#39;_date&#39;] = pd.to_datetime(completed[&#39;_date&#39;]).dt.date completed.to_sql(&#39;completed&#39;, cxn, if_exists=&#39;replace&#39;, index=False) . [&#39;Sr #&#39;, &#39;From&#39;, &#39;To&#39;, &#39;Date&#39;, &#39;Passengers&#39;, &#39;Airline&#39;] . Getting the Province, cities and population info from Wikipedia for Pakistan . I got this information because I want to see the flights based on provinces. This information is not avilabile in the orignal table. . pak_loc = &#39;https://en.wikipedia.org/wiki/List_of_cities_in_Pakistan&#39; page = requests.get(pak_loc) if page.status_code == 200: soup = soup = BeautifulSoup(page.content, &#39;html.parser&#39;) else: print(&quot;Error Page status:&quot;, page.status_code) . Getting Provinces and cities of pakistan . data = [] for x in soup.find_all(&#39;table&#39;, {&#39;class&#39;: &#39;wikitable&#39;}): provice = &#39;&#39; _type = &#39;&#39; if &#39;Balochistan&#39; in x.find(&#39;th&#39;).text: provice = &#39;Balochistan&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; elif &#39;Khyber&#39; in x.find(&#39;th&#39;).text: provice = &#39;Khyber&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; elif &#39;Punjab&#39; in x.find(&#39;th&#39;).text: provice = &#39;Punjab&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; elif &#39;Sindh&#39; in x.find(&#39;th&#39;).text: provice = &#39;Sindh&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; elif &#39;Kashmir&#39; in x.find(&#39;th&#39;).text: provice = &#39;Kashmir&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; elif &#39;Capital&#39; in x.find(&#39;th&#39;).text: provice = &#39;Punjab&#39; _type = &#39;municipalities&#39; elif &#39;Gilgit&#39; in x.find(&#39;th&#39;).text: provice = &#39;Gilgit&#39; if &#39;municipalities&#39; in x.find(&#39;th&#39;).text: _type = &#39;municipalities&#39; elif &#39;districts&#39; in x.find(&#39;th&#39;).text: _type = &#39;districts&#39; population = x.find(&#39;tbody&#39;).find_all(&#39;tr&#39;)[3] names = x.find(&#39;tbody&#39;).find_all(&#39;tr&#39;)[2] for name, pop in zip(names.find_all(&#39;td&#39;), population.find_all(&#39;td&#39;)): data.append({ &#39;provice&#39;: provice, &#39;_type&#39;: _type, &#39;city&#39;: name.text[:-6], &#39;population&#39;: pop.text.replace(&#39; n&#39;,&#39;&#39;).replace(&#39;,&#39;,&#39;&#39;) }) pak = pd.DataFrame(data) pak.to_sql(&#39;pakistan&#39;, cxn, if_exists=&#39;replace&#39;, index=False) . Get CSVs . def sql_fetch(con): cursorObj = con.cursor() cursorObj.execute(&#39;SELECT name from sqlite_master where type= &quot;table&quot;&#39;) return cursorObj.fetchall() for x in sql_fetch(cxn): filename = f&quot;{x[0]}.csv&quot; df = pd.read_sql(f&quot;select * from {x[0]}&quot;, cxn) df.to_csv(filename, index=False) del df print(filename, &#39;created&#39;) . schedule.csv created completed.csv created pakistan.csv created .",
            "url": "https://abdulwahidgul.me/2020/06/14/flights_scrapper.html",
            "relUrl": "/2020/06/14/flights_scrapper.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Enter the World of Docker",
            "content": "Introduction . The idea of having an isolated environment is nothing new. To keep your computer clear of all clutter which is produced by installing programming language, framework, and databases. This is something you worry about when you have passed the beginning of your programming journey. There always have been solutions for you to achieve this in the modern programming paradigm. But as programming evolves and get’s better. So does the tool to help you write programs. . World before Docker . In the past, we had solutions that would introduce a complete virtual environment. This will be an isolated OS on your system with its operating system, fixed and expendable resources. This was a viable solution, and it is still used in some case studies these days. But most of us don’t need such a resource hugging solution. Anyone that has run something like Virtualbox or similar solution would know what I mean. We also had solutions like vagrant. But they also had their problems of being efficient you can read up more on them on the internet. I personally had worked with Virtualbox and found it much easier to work with than Vagrant. But I might have had been a younger develop back than. But that should speak volumes for its developer-friendly nature. . World with Docker . Enter Docker. So how has the world changed? Docker allows the users to use the underline kernel of the OS and just isolate the parts of the application that is unique. This greatly reduces the resources intensive nature of virtualization, with some additional perks. You can mimic your development environment without worrying about the machine you are developing on. It also lets you pass around your environment with your team and they can start off with a similar environment instantaneously. It is also helpful for getting the junior and new recruits without letting them worry about setup. . What is Docker? . Docker is exactly like a virtual environment. But the much more appealing as compared to a VirtualBox solution. It lets you use the kernel of your base operating system. Since you already have it installed. If you are using a Windows or Mac OS. you will have install the docker with the lunix container system to access to kernel. That is done automatically for Docker Desktop installation on either OSs. But in Linux you don’t have to install the Linux kernel. Since it is already part of the operating system. Docker has some key terminologies. Knowing them will be helpful on your learning journey. . Images | Containers | Volumes | Networks | Images . This is the core of your application. Just like when you are deploying an application to a server. You have to get hosting from AWS, or Azure. You select your VM (virtual machine), and select a Linux flavor. If it is a Linux server? (Docker works with windows based images as well.) Then you install all of your required programming languages and tools (databases, queueing system, etc.). An image is that isolation in Docker. You can backup your VM and spin-up other VMs with it. The same concept applies to images in docker. You can use an image to create multiple containers. An image in Docker can be ubuntu, fedora, or alpine based. I will talk more about my choice of Linux version Alpine in the series of Docker posts. . Containers . Following along the same analogy of VMs. When you have the VM configured and installed all of your application dependency. Know that code of your application has to be pulled in to the VM and some configuration has to be made for it to run on the VM. This running of your application is equal to a container in the Docker universe. What Docker lets you do is to encapsulate your code into the container. . Volume . When you run a container all of your application’s state is stored in the container. If you remove your container all the files in that container will be removed. What this means is that, if your application has uploaded images or files within the container. They will be removed along the container. Also, when you have a database running as a container, all of your databases active will be removed with the container. This is scary. But don’t worry. Docker lets you mount a folder on to your system to the inside of a container. The mouning syncs the files and folder between the folder on your computer with the container. You lose no information. Know if you remove the container, or even the image, your data is safe and sound. When you recreate the container you can carry on from where you have left off. Pretty cool right? . Networks . Since Docker is its own light computer running inside your VM or the local machine. It maps its ports for communication to the outside world. For the ports to be accessable externally from the container, we have to do that in the configuration. It is part of the Docker configuration process. You can create a network within Docker that will help your container communicate on a shared resource machine(everything running on the same machine). You can also create an overlay network in docker that spans over multiple machines. . Docker and its files . So how does the alchemy of Docker works? Well, it is quite simple if you understand the key points of Docker. Since the docker entire creation process is working with config files. You don’t need programming for the most part of working with Docker. Two key config files that you work are defined as follows. . Dockerfile . A file name Dockerfile with no extension is where you create the image. refer to the Image heading. You can have a different name. The Dockerfile is just the default format. If you choose to have a different name, you need to specify the filename when you are running the Docker commands. . Docker-compose . Everything in Docker is an individual image. Databases, programming language, frameworks, etc. They function independently. If you want to run multiple images an example would be python running on alpine Linux base image, using Django as the web backend framework, Postgres, or MySql as a primary database, Redis as a caching database, and a job scheduler. You can define all of them in the docker-compose.yml file. The extension of this file can be YML or YMAL. It does not matter which extension you use. Whatever you specify in the docker-compose file will be on the same network. You don’t need to link them manually. But if you choose for it to be part of a predefined network. Or let other containers connect with the resources created by a docker-compose file you can do that within the docker-compose file. . Always remember to use the internal ports when you have created a connection. Since all of them are on the same network. You can use the service name instead of an IP as your host. This will help you in case if you recreate a container, the IP will be taken care of by Docker. . Conclusion . In future posts, I will talk in-depth on how to work with each aspect of the Docker environment. I will dedicate a post for each of the main ideas in the Docker environment. If you have any question feel free to leave a comment or for a detail converstaion email me @ .",
            "url": "https://abdulwahidgul.me/docker/devops/2020/05/20/docker-introduction.html",
            "relUrl": "/docker/devops/2020/05/20/docker-introduction.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://abdulwahidgul.me/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, my name is Abdulwahid Gul aka Wahid. I have a master’s degree in Big data from the Queen Mary University of London. I also have an undergraduate degree in Computer Science. I am very curious about computers in general. My area of intrest and expertise are in Data Science and Web Development. I am mostly interested in modern tools for the modern-day developer. . I spend most of my time trying to find the right tool for the right job. I am a firm believer in the 80/20 rule. I try my best to understand and learn the 20% of the skills that can help me achieve that 80% of the work. I know it is not easy to identify which 20% I need to focus on. But with time I am getting better in identifying that 20%. If I have to jump deep into a particular topic and add additional skills I don’t mind learning them. . I focus on the best possible action needed for a business or an idea I am working on. I do not stick with a tool because I am bias to it. I try to get the right tool for the right job. I know selecting the tools is not as straight forward. But I make sure I progress forward and achieving the desired outcome, in the most efficient manner possible. . I like to write about web development and data science from my experience and perspective. Sharing what I learn along my journey of this endless sea of computer science knowledge. If you want to get in touch feel free to send me an email @. I hope you find the posts interesting and educational. If you have any questions about the posts. Feel free to comment or send me an email. .",
          "url": "https://abdulwahidgul.me/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://abdulwahidgul.me/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}